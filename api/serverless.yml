service: burnance
provider:
  profile: allyn-burnance
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'} 
  memorySize: 128
  timeout: 30
  deploymentBucket:
    name: service.burnance.nodejs.lambdas.${self:provider.stage}
  environment:
    STAGE:  ${opt:stage,'dev'}
    REGION: ${opt:region, self:provider.region}
    ACCOUNTID: ${file(config.${self:provider.stage}.json):AWS_ACT_ID}  
    USER_AGENT: ${file(config.${self:provider.stage}.json):USER_AGENT}
    CDN_BUCKET: ${file(config.${self:provider.stage}.json):CDN_BUCKET}
    NFT_IMAGE_CDN_BUCKET: ${file(config.${self:provider.stage}.json):NFT_IMAGE_CDN_BUCKET}
    QUICK_NODE_HTTP: ${file(config.${self:provider.stage}.json):QUICK_NODE_HTTP}
    QUICK_NODE_WSS: ${file(config.${self:provider.stage}.json):QUICK_NODE_WSS}
    ETHERSCAN_API_URL: ${file(config.${self:provider.stage}.json):ETHERSCAN_API_URL}
    NFT_PORT_API_KEY: ${file(config.${self:provider.stage}.json):NFT_PORT_API_KEY}
    ALCHEMY_API_KEY: ${file(config.${self:provider.stage}.json):ALCHEMY_API_KEY}
    API_KEY_TOKEN: ${file(config.${self:provider.stage}.json):API_KEY_TOKEN}
    PRO_API_KEY: ${file(config.${self:provider.stage}.json):PRO_API_KEY}
    ETHERSCAN_ABI_PARAMS: ${file(config.${self:provider.stage}.json):ETHERSCAN_ABI_PARAMS}
    OPEN: ${file(config.${self:provider.stage}.json):OPEN}
    SLACK_API_WAITLIST_WEBHOOK: ${file(config.${self:provider.stage}.json):SLACK_API_WAITLIST_WEBHOOK}
    DRIP: ${file(config.${self:provider.stage}.json):DRIP}
    DRIP_ID: ${file(config.${self:provider.stage}.json):DRIP_ID}
    S3_DRIP_CDN_BUCKET: ${file(config.${self:provider.stage}.json):S3_DRIP_CDN_BUCKET}
    DYNAMODB_TABLE_CONTRACT_ABI: ${self:service}-${opt:stage, self:provider.stage}-contract-abi
    DYNAMODB_TABLE_NFT_METADATA: ${self:service}-${opt:stage, self:provider.stage}-nfts-metadata
    DYNAMODB_TABLE_NFT_IMAGE: ${self:service}-${opt:stage, self:provider.stage}-nfts-image
    DYNAMODB_TABLE_WAITLIST: ${self:service}-${opt:stage, self:provider.stage}-waitlist
    DYNAMODB_TABLE_WALLET: ${self:service}-${opt:stage, self:provider.stage}-wallet
    DYNAMODB_TABLE_WALLET_NFT: ${self:service}-${opt:stage, self:provider.stage}-wallet-nft
    DYNAMODB_TABLE_WALLET_NFT_CACHE: ${self:service}-${opt:stage, self:provider.stage}-wallet-nft-cache
    DYNAMODB_TABLE_WALLET_COLLECTION_CACHE: ${self:service}-${opt:stage, self:provider.stage}-wallet-collection-cache
    DYNAMODB_TABLE_ALCHEMY_WALLET_COLLECTION_CACHE: ${self:service}-${opt:stage, self:provider.stage}-alchemy-wallet-collection-cache
    DYNAMODB_TABLE_ALCHEMY_WALLET_NFT_CACHE: ${self:service}-${opt:stage, self:provider.stage}-alchemy-wallet-nft-cache
    DYNAMODB_TABLE_WALLET_NFT_TX: ${self:service}-${opt:stage, self:provider.stage}-wallet-nft-tx
    DYNAMODB_TABLE_NFT_COLLECTION: ${self:service}-${opt:stage, self:provider.stage}-nft-collection
    DYNAMODB_TABLE_WALLET_TX_HASH: ${self:service}-${opt:stage, self:provider.stage}-wallet-nft-tx-hash
    NODE: ${file(config.${self:provider.stage}.json):NODE}
    KEY: ${file(config.${self:provider.stage}.json):KEY}
    STATE_MACHINE_WALLET_ARN : arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:walletDetailsStateMachineArn
    STATE_MACHINE_WALLET_NFT_LIST_START_ARN : arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:walletListStartStateMachine-${self:service}-${opt:stage, self:provider.stage}
    STATE_MACHINE_WALLET_NFT_LIST_ARN : arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:walletNftListStateMachine-${self:service}-${opt:stage, self:provider.stage}
    STATE_MACHINE_COLLECTION_LIST_ARN: arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:collectionListStateMachine-${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements: 
    - Effect: "Allow"
      Action:
        - states:StartExecution
        - states:SendTaskSuccess
        - states:ListExecutions
        - states:GetExecutionHistory
        - states:StopExecution
      Resource: 
        - arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:walletNftListStateMachine-${self:service}-${opt:stage, self:provider.stage}
        - arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:collectionListStateMachine-${self:service}-${opt:stage, self:provider.stage}
        - arn:aws:states:${opt:region, self:provider.region}:${self:provider.environment.ACCOUNTID}:stateMachine:walletListStartStateMachine-${self:service}-${opt:stage, self:provider.stage}
    - Effect: "Allow"
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
        - s3:*
      Resource: 
        - "arn:aws:s3:::${file(config.${self:provider.stage}.json):CDN_BUCKET}/*"
        - "arn:aws:s3:::${file(config.${self:provider.stage}.json):NFT_IMAGE_CDN_BUCKET}/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NFT_METADATA}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CONTRACT_ABI}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WAITLIST}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT}/index/*"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT_CACHE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT_TX}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NFT_IMAGE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_NFT_COLLECTION}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET_COLLECTION_CACHE}" 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_WALLET_TX_HASH}" 
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ALCHEMY_WALLET_COLLECTION_CACHE}"
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_ALCHEMY_WALLET_NFT_CACHE}"
package:
  individually: false
  exclude:
  - node_modules/puppeteer/.local-chromium/**
functions:
  - ${file(./functions/nft.yml)}
  - ${file(./functions/etherscan.yml)}
  - ${file(./functions/waitlist.yml)}  
  - ${file(./functions/quicknode.yml)} 
  - ${file(./functions/wallet.yml)}
  - ${file(./functions/collection.yml)}
stepFunctions: 
  validate: false
  stateMachines:
    collectionLoad:
      ${file(./statemachines/collection-list-machine.yml)} 
    nftLoad:
      ${file(./statemachines/wallet-nft-list-machine.yml)}
    startNFTLoad:
      ${file(./statemachines/wallet-nft-list-start-machine.yml)}    
resources:
  Resources:
    # NFTImageBucket:
    #  Type: AWS::S3::Bucket
    #  Properties:
    #    BucketName: ${self:provider.environment.NFT_IMAGE_CDN_BUCKET} 
    # NFTBucket:
    #  Type: AWS::S3::Bucket
    #  Properties:
    #    BucketName: ${self:provider.environment.CDN_BUCKET} 
    # GatewayResponse:
    #   Type: 'AWS::ApiGateway::GatewayResponse'
    #   Properties:
    #     ResponseParameters:
    #       gatewayresponse.header.WWW-Authenticate: "'Basic'"
    #     ResponseType: UNAUTHORIZED
    #     RestApiId:
    #       Ref: 'ApiGatewayRestApi'
    #     StatusCode: '401'
    # NFTTxHashDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chainAddress
    #         AttributeType: S
    #       -  
    #         AttributeName: hash
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chainAddress
    #         KeyType: HASH
    #       -
    #         AttributeName: hash
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WALLET_TX_HASH}
    AlchemyNFTCacheDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: chain
            AttributeType: S
          -  
            AttributeName: address
            AttributeType: S
        KeySchema:
          -
            AttributeName: chain
            KeyType: HASH
          -
            AttributeName: address
            KeyType: RANGE      
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_ALCHEMY_WALLET_NFT_CACHE}
    # AlchemyCollectionCacheDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: address
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: address
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_ALCHEMY_WALLET_COLLECTION_CACHE}
    # NFTImageDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: address
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: address
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WALLET_COLLECTION_CACHE}
    # NFTImageDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chainContractAddress
    #         AttributeType: S
    #       -  
    #         AttributeName: tokenId
    #         AttributeType: N
    #     KeySchema:
    #       -
    #         AttributeName: chainContractAddress
    #         KeyType: HASH
    #       -
    #         AttributeName: tokenId
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_NFT_IMAGE}
    # WalletNFTtxDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: owner
    #         AttributeType: S
    #       -  
    #         AttributeName: contractAddressTokenId
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: owner
    #         KeyType: HASH
    #       -
    #         AttributeName: contractAddressTokenId
    #         KeyType: RANGE      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT_TX}
    # NFTCollectionDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: contractAddress
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: contractAddress
    #         KeyType: RANGE  
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_NFT_COLLECTION}
    # WalletNFTCacheDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: address
    #         AttributeType: S
    #       -  
    #         AttributeName: page
    #         AttributeType: N
    #     KeySchema:
    #       -
    #         AttributeName: address
    #         KeyType: HASH
    #       -
    #         AttributeName: page
    #         KeyType: RANGE  
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT_CACHE}
    # WalletDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: address
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: address
    #         KeyType: RANGE  
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WALLET}
    # WalletNFTDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: contractAddressTokenId
    #         AttributeType: S
    #       -  
    #         AttributeName: owner
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: contractAddressTokenId
    #         KeyType: RANGE
    #     GlobalSecondaryIndexes:
    #       - IndexName: InstanceIdIndex
    #         KeySchema:
    #           - AttributeName: owner
    #             KeyType: HASH
    #           - AttributeName: contractAddressTokenId
    #             KeyType: RANGE
    #         Projection:
    #           NonKeyAttributes:
    #             - costETH 
    #             - costUSD 
    #             - valueUSD 
    #             - valueETH
    #             - gasUSD
    #             - gasETH
    #             - gasData
    #             - ethTransPriceUSD
    #             - hash
    #             - createdatetime
    #             - timestamp
    #             - status
    #           ProjectionType: 'INCLUDE'
    #         ProvisionedThroughput:
    #           ReadCapacityUnits: 1
    #           WriteCapacityUnits: 1      
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WALLET_NFT}
    # WaitlistDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: emailaddress
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: emailaddress
    #         KeyType: RANGE  
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_WAITLIST}
    # NFTMetaDataDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chainContractAddress
    #         AttributeType: S
    #       -  
    #         AttributeName: tokenId
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chainContractAddress
    #         KeyType: HASH
    #       -
    #         AttributeName: tokenId
    #         KeyType: RANGE  
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 2
    #       WriteCapacityUnits: 2
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_NFT_METADATA} 
    # ContractABIDynamoDBTable:
    #   Type: 'AWS::DynamoDB::Table'
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: chain
    #         AttributeType: S
    #       -  
    #         AttributeName: contractAddress
    #         AttributeType: S
    #     KeySchema:
    #       -
    #         AttributeName: chain
    #         KeyType: HASH
    #       -
    #         AttributeName: contractAddress
    #         KeyType: RANGE  
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 2
    #       WriteCapacityUnits: 2
    #     TableName: ${self:provider.environment.DYNAMODB_TABLE_CONTRACT_ABI}    
custom:
   tableThroughput: 1
   prune:
     automatic: true
     number: 5   
plugins:
  - serverless-offline
  - serverless-prune-plugin
  - serverless-step-functions

