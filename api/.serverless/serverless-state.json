{
  "service": {
    "service": "burnance",
    "serviceObject": {
      "name": "burnance"
    },
    "provider": {
      "profile": "allyn-burnance",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "stage": "dev",
      "memorySize": 128,
      "timeout": 30,
      "deploymentBucket": "service.burnance.nodejs.lambdas.dev",
      "environment": {
        "STAGE": "dev",
        "REGION": "us-east-1",
        "ACCOUNTID": "297677912558",
        "USER_AGENT": "dev.nft.burnance.io",
        "CDN_BUCKET": "dev.nft.burnance.io",
        "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
        "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
        "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
        "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
        "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
        "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
        "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
        "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
        "OPEN": "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",
        "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
        "DRIP": "d19af8d64382261d9cbd9762fdd07356",
        "DRIP_ID": "4947055",
        "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
        "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
        "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
        "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
        "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
        "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
        "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
        "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
        "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
        "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
        "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
        "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
        "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
        "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
            "s3:DeleteObject",
            "s3:*"
          ],
          "Resource": [
            "arn:aws:s3:::dev.nft.burnance.io/*",
            "arn:aws:s3:::dev.image.nft.burnance.io/*"
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:DescribeTable",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-nfts-metadata",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-contract-abi",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-waitlist",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-wallet",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-wallet-nft",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-wallet-nft/index/*",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-wallet-nft-cache",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-wallet-nft-tx",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-nfts-image",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-nft-collection",
            "arn:aws:dynamodb:us-east-1:*:table/burnance-dev-wallet-collection-cache"
          ]
        }
      ],
      "versionFunctions": true,
      "deploymentBucketObject": {
        "name": "service.burnance.nodejs.lambdas.dev"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "NftImageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-nftImage"
            }
          },
          "ViewNFTLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-viewNFT"
            }
          },
          "ViewNFTtxLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-viewNFTtx"
            }
          },
          "GetEthPriceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-getEthPrice"
            }
          },
          "GetTxFeeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-getTxFee"
            }
          },
          "AddToWaitlistLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-addToWaitlist"
            }
          },
          "QnUnderscorefetchNFTsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-qn_fetchNFTs"
            }
          },
          "WalletExecuteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletExecute"
            }
          },
          "WalletStartLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletStart"
            }
          },
          "WalletLoadLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletLoad"
            }
          },
          "WalletStopLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletStop"
            }
          },
          "WalletNotificationLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletNotification"
            }
          },
          "WalletAddLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletAdd"
            }
          },
          "WalletGetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletGet"
            }
          },
          "WalletGetNFTsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletGetNFTs"
            }
          },
          "WalletDeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-walletDelete"
            }
          },
          "CollectionAddLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionAdd"
            }
          },
          "CollectionGetLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionGet"
            }
          },
          "CollectionViewLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionView"
            }
          },
          "CollectionGetDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionGetDetails"
            }
          },
          "CollectionGetFloorPriceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionGetFloorPrice"
            }
          },
          "CollectionGetVolumeLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionGetVolume"
            }
          },
          "CollectionDeleteLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/burnance-dev-collectionDelete"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "burnance",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/burnance-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/burnance-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "burnance",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "NftImageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "actions.getNFTImage",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-nftImage",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "NftImageLogGroup"
            ]
          },
          "ViewNFTLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "actions.view",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-viewNFT",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ViewNFTLogGroup"
            ]
          },
          "ViewNFTtxLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "etherscan/handler.tokenNftTx",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-viewNFTtx",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ViewNFTtxLogGroup"
            ]
          },
          "GetEthPriceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "etherscan/handler.getEthPrice",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-getEthPrice",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetEthPriceLogGroup"
            ]
          },
          "GetTxFeeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "etherscan/handler.getTxTransactionFee",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-getTxFee",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetTxFeeLogGroup"
            ]
          },
          "AddToWaitlistLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "waitlist/handler.add",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-addToWaitlist",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "AddToWaitlistLogGroup"
            ]
          },
          "QnUnderscorefetchNFTsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "quicknode/handler.qn_fetchNFTs",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-qn_fetchNFTs",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "QnUnderscorefetchNFTsLogGroup"
            ]
          },
          "WalletExecuteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/wallet.start",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletExecute",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletExecuteLogGroup"
            ]
          },
          "WalletStartLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/steps.start",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletStart",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletStartLogGroup"
            ]
          },
          "WalletLoadLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/steps.loadWalletData",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletLoad",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletLoadLogGroup"
            ]
          },
          "WalletStopLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/steps.stop",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletStop",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletStopLogGroup"
            ]
          },
          "WalletNotificationLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/steps.notification",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletNotification",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletNotificationLogGroup"
            ]
          },
          "WalletAddLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/wallet.AddWallet",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletAdd",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletAddLogGroup"
            ]
          },
          "WalletGetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/wallet.GetWallet",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletGet",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletGetLogGroup"
            ]
          },
          "WalletGetNFTsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/wallet.GetWalletNFTs",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletGetNFTs",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletGetNFTsLogGroup"
            ]
          },
          "WalletDeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "wallet/wallet.DeleteWallet",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-walletDelete",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "WalletDeleteLogGroup"
            ]
          },
          "CollectionAddLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.AddCollection",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionAdd",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionAddLogGroup"
            ]
          },
          "CollectionGetLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.GetCollection",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionGet",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionGetLogGroup"
            ]
          },
          "CollectionViewLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.ViewCollection",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionView",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionViewLogGroup"
            ]
          },
          "CollectionGetDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.GetCollectionDetails",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionGetDetails",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionGetDetailsLogGroup"
            ]
          },
          "CollectionGetFloorPriceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.GetCollectionFloorPrice",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionGetFloorPrice",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionGetFloorPriceLogGroup"
            ]
          },
          "CollectionGetVolumeLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.GetCollectionFloorPrice",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionGetVolume",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionGetVolumeLogGroup"
            ]
          },
          "CollectionDeleteLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "service.burnance.nodejs.lambdas.dev",
                "S3Key": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z/burnance.zip"
              },
              "Handler": "collection/handler.DeleteCollection",
              "Runtime": "nodejs12.x",
              "FunctionName": "burnance-dev-collectionDelete",
              "MemorySize": 128,
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "STAGE": "dev",
                  "REGION": "us-east-1",
                  "ACCOUNTID": "297677912558",
                  "USER_AGENT": "dev.nft.burnance.io",
                  "CDN_BUCKET": "dev.nft.burnance.io",
                  "NFT_IMAGE_CDN_BUCKET": "dev.image.nft.burnance.io",
                  "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
                  "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
                  "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
                  "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
                  "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
                  "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
                  "OPEN": "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",
                  "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
                  "DRIP": "d19af8d64382261d9cbd9762fdd07356",
                  "DRIP_ID": "4947055",
                  "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
                  "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-dev-contract-abi",
                  "DYNAMODB_TABLE_NFT_METADATA": "burnance-dev-nfts-metadata",
                  "DYNAMODB_TABLE_NFT_IMAGE": "burnance-dev-nfts-image",
                  "DYNAMODB_TABLE_WAITLIST": "burnance-dev-waitlist",
                  "DYNAMODB_TABLE_WALLET": "burnance-dev-wallet",
                  "DYNAMODB_TABLE_WALLET_NFT": "burnance-dev-wallet-nft",
                  "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-dev-wallet-nft-cache",
                  "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-dev-wallet-collection-cache",
                  "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-dev-wallet-nft-tx",
                  "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-dev-nft-collection",
                  "NODE": "wss://mainnet.infura.io/ws/v3/5d683ea6270a44d4996ad65529057982",
                  "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
                  "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CollectionDeleteLogGroup"
            ]
          },
          "NftImageLambdaVersionuanTpX3GMd2KjX2cvdQWP6E9ve7vsaPs4rVW2pmpU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "NftImageLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "AddToWaitlistLambdaVersionDrtdpDI4Mj2UpqvZH0zI9oXpq5k6Sej78EEHEpRw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AddToWaitlistLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "GetTxFeeLambdaVersionvy2HzI5Ddo8FQa4FTy1U9KSqSvzpnpIXU4ZbxJyJ5aw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTxFeeLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "GetEthPriceLambdaVersion5BAICm3vm7zh23seWwSgmrPBneMBnaXSdZkETDWMyY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetEthPriceLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "ViewNFTtxLambdaVersionpGtyPJkkG7hz79lLEzuOE9ZMOOJFUs80pKloIFWcVU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ViewNFTtxLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "QnUnderscorefetchNFTsLambdaVersioneV2dpUqUP3hd2y9CShIbvS1lgaPe3ugFnL66YdhDY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "QnUnderscorefetchNFTsLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletExecuteLambdaVersion7LwUe9GhQVE8I22qo2PZDRzCBikY54ZTQ94Q7cY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletExecuteLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletStopLambdaVersionetPI0BiPQBUW1npND1chYPoUKOS6pYIcEw0oXU8I0g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletStopLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletStartLambdaVersionxzv5hkGY3NiS0UpP8T2PJGKwzG7auTYmeAhFKzu4lc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletStartLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletLoadLambdaVersionFFDY8nDO5jaPjZso0Y4vVeVrx95Jgm7acFqAeAvTE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletLoadLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletDeleteLambdaVersion6besqRVQjG6N3KEvjSxnUsJXN9FqPHkhjpwY4IQrMIc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletDeleteLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletNotificationLambdaVersionTQmdEgrsKO5z0STSBhafmKMiZk54xc3GgvdXFYmHN8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletNotificationLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletGetLambdaVersionHJMPseQuNGjBEo7J6cdcA2CkObecaKDuA964briCY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletGetLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletAddLambdaVersions1HcKNuP4nNTpjm5GS8NrNMOqNbADj5tO4Tdml9IiU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletAddLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionAddLambdaVersionUeJRH4lJUCc9vJBUjtr57uu76SZ7rLMOGnAJndHFOco": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionAddLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "WalletGetNFTsLambdaVersion2J1epNWtfVYaxf04J0ItqZqXi9fXEhC4UfcyIYZzBXA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WalletGetNFTsLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "ViewNFTLambdaVersionTrB8TV5G0ToZvbWaz0ddJs2ytKiLMssTvsvykgbiE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ViewNFTLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionViewLambdaVersiongY9qOe9YIxtS6cmu38XlsTRsj2MQgWAWjx9QU4CET6A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionViewLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionGetDetailsLambdaVersionCe7EKnpkfssfuyUFXFL0VlljgXSuLTjXATcyIHdQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionGetDetailsLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionGetVolumeLambdaVersionHBFsyt3CL5ZFQAjEA0zzCX8K5d4daEu87UASsUGEmc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionGetVolumeLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionGetLambdaVersion2jLdRrIlvRhQrovsIANR7rI2IuUL92GH4dkE5Pp74q0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionGetLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionGetFloorPriceLambdaVersiondkEGm7T6HMIcrLkVtWFaSDenMAMvgYqTMebqMOeiUc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionGetFloorPriceLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "CollectionDeleteLambdaVersionpGkOjbzJvDo99zPzpE8ThrjUiHGChrrxBJqjDqNu06I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CollectionDeleteLambdaFunction"
              },
              "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-burnance",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceNft": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "nft",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceNftImage": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceNft"
              },
              "PathPart": "image",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceView": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "view",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceViewNft": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceView"
              },
              "PathPart": "nft",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEtherscan": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "etherscan",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEtherscanTokennfttx": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEtherscan"
              },
              "PathPart": "tokenNftTx",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEtherscanEthprice": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEtherscan"
              },
              "PathPart": "ethprice",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceEtherscanTx": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceEtherscan"
              },
              "PathPart": "tx",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWaitlist": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "waitlist",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWaitlistAdd": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWaitlist"
              },
              "PathPart": "add",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuicknode": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "quicknode",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceQuicknodeQnfetchnfts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceQuicknode"
              },
              "PathPart": "qn_fetchNFTs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWallet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "wallet",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletWorkflow": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "workflow",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletWorkflowLoad": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletWorkflow"
              },
              "PathPart": "load",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletWorkflowLoadStart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletWorkflowLoad"
              },
              "PathPart": "start",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletStep": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "step",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletStepStart": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletStep"
              },
              "PathPart": "start",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletStepDetails": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletStep"
              },
              "PathPart": "details",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletStepDetailsLoad": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletStepDetails"
              },
              "PathPart": "load",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletNfts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "nfts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletNftsChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletNfts"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletNftsChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletNftsChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollection": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "collection",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionView": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "PathPart": "view",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionViewChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionView"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionViewChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionViewChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionViewChainVarAddressVarContractaddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionViewChainVarAddressVar"
              },
              "PathPart": "{contractAddress}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionDetails": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "PathPart": "details",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionDetailsChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionDetails"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionDetailsChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionDetailsChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionFloor": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "PathPart": "floor",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionFloorChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionFloor"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionFloorChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionFloorChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionVolume": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "PathPart": "volume",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionVolumeChainVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionVolume"
              },
              "PathPart": "{chain}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceCollectionVolumeChainVarAddressVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceCollectionVolumeChainVar"
              },
              "PathPart": "{address}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNftImageOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceNftImage"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodViewNftOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceViewNft"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEtherscanTokennfttxOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEtherscanTokennfttx"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEtherscanEthpriceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEtherscanEthprice"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodEtherscanTxOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceEtherscanTx"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWaitlistAddOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWaitlistAdd"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodQuicknodeQnfetchnftsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuicknodeQnfetchnfts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletWorkflowLoadStartOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletWorkflowLoadStart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletChainVarAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletNftsChainVarAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletNftsChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionChainVarAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionViewChainVarAddressVarContractaddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionDetailsChainVarAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionDetailsChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionFloorChainVarAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionFloorChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodCollectionVolumeChainVarAddressVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionVolumeChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodNftImagePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceNftImage"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "NftImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "NftImageLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodViewNftPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceViewNft"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ViewNFTLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ViewNFTLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEtherscanTokennfttxPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEtherscanTokennfttx"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ViewNFTtxLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ViewNFTtxLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEtherscanEthpriceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEtherscanEthprice"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetEthPriceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetEthPriceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodEtherscanTxGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceEtherscanTx"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTxFeeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetTxFeeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWaitlistAddPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWaitlistAdd"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AddToWaitlistLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AddToWaitlistLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodQuicknodeQnfetchnftsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceQuicknodeQnfetchnfts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "QnUnderscorefetchNFTsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "QnUnderscorefetchNFTsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletWorkflowLoadStartPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletWorkflowLoadStart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletExecuteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletExecuteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletStepStartPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletStepStart"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletStartLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletStartLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletStepDetailsLoadPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletStepDetailsLoad"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletLoadLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletLoadLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletAddLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletAddLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletChainVarAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletGetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletGetLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletNftsChainVarAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletNftsChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletGetNFTsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletGetNFTsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletChainVarAddressVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "WalletDeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "WalletDeleteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollection"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionAddLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionAddLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionChainVarAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionGetLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionGetLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionViewChainVarAddressVarContractaddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionViewLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionViewLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionDetailsChainVarAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionDetailsChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionGetDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionGetDetailsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionFloorChainVarAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionFloorChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionGetFloorPriceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionGetFloorPriceLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionVolumeChainVarAddressVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionVolumeChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionGetVolumeLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionGetVolumeLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodCollectionChainVarAddressVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceCollectionChainVarAddressVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CollectionDeleteLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CollectionDeleteLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1658782769492": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodNftImageOptions",
              "ApiGatewayMethodViewNftOptions",
              "ApiGatewayMethodEtherscanTokennfttxOptions",
              "ApiGatewayMethodEtherscanEthpriceOptions",
              "ApiGatewayMethodEtherscanTxOptions",
              "ApiGatewayMethodWaitlistAddOptions",
              "ApiGatewayMethodQuicknodeQnfetchnftsOptions",
              "ApiGatewayMethodWalletWorkflowLoadStartOptions",
              "ApiGatewayMethodWalletOptions",
              "ApiGatewayMethodWalletChainVarAddressVarOptions",
              "ApiGatewayMethodWalletNftsChainVarAddressVarOptions",
              "ApiGatewayMethodCollectionOptions",
              "ApiGatewayMethodCollectionChainVarAddressVarOptions",
              "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarOptions",
              "ApiGatewayMethodCollectionDetailsChainVarAddressVarOptions",
              "ApiGatewayMethodCollectionFloorChainVarAddressVarOptions",
              "ApiGatewayMethodCollectionVolumeChainVarAddressVarOptions",
              "ApiGatewayMethodNftImagePost",
              "ApiGatewayMethodViewNftPost",
              "ApiGatewayMethodEtherscanTokennfttxPost",
              "ApiGatewayMethodEtherscanEthpriceGet",
              "ApiGatewayMethodEtherscanTxGet",
              "ApiGatewayMethodWaitlistAddPost",
              "ApiGatewayMethodQuicknodeQnfetchnftsPost",
              "ApiGatewayMethodWalletWorkflowLoadStartPost",
              "ApiGatewayMethodWalletStepStartPost",
              "ApiGatewayMethodWalletStepDetailsLoadPost",
              "ApiGatewayMethodWalletPost",
              "ApiGatewayMethodWalletChainVarAddressVarGet",
              "ApiGatewayMethodWalletNftsChainVarAddressVarGet",
              "ApiGatewayMethodWalletChainVarAddressVarDelete",
              "ApiGatewayMethodCollectionPost",
              "ApiGatewayMethodCollectionChainVarAddressVarGet",
              "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarGet",
              "ApiGatewayMethodCollectionDetailsChainVarAddressVarGet",
              "ApiGatewayMethodCollectionFloorChainVarAddressVarGet",
              "ApiGatewayMethodCollectionVolumeChainVarAddressVarGet",
              "ApiGatewayMethodCollectionChainVarAddressVarDelete"
            ]
          },
          "NftImageLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "NftImageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ViewNFTLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ViewNFTLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ViewNFTtxLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ViewNFTtxLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetEthPriceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetEthPriceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTxFeeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTxFeeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AddToWaitlistLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AddToWaitlistLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "QnUnderscorefetchNFTsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "QnUnderscorefetchNFTsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletExecuteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletExecuteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletStartLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletStartLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletLoadLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletLoadLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletAddLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletAddLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletGetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletGetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletGetNFTsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletGetNFTsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WalletDeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WalletDeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionAddLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionAddLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionGetLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionGetLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionViewLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionViewLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionGetDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionGetDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionGetFloorPriceLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionGetFloorPriceLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionGetVolumeLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionGetVolumeLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CollectionDeleteLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CollectionDeleteLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "NFTImageDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "chain",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "address",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "chain",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "address",
                  "KeyType": "RANGE"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "burnance-dev-wallet-collection-cache"
            }
          },
          "WalletNFTDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "chain",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "contractAddressTokenId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "owner",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "chain",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "contractAddressTokenId",
                  "KeyType": "RANGE"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "InstanceIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "owner",
                      "KeyType": "HASH"
                    },
                    {
                      "AttributeName": "contractAddressTokenId",
                      "KeyType": "RANGE"
                    }
                  ],
                  "Projection": {
                    "NonKeyAttributes": [
                      "costETH",
                      "costUSD",
                      "valueUSD",
                      "valueETH",
                      "gasUSD",
                      "gasETH",
                      "gasData",
                      "ethTransPriceUSD",
                      "hash",
                      "createdatetime",
                      "timestamp",
                      "status"
                    ],
                    "ProjectionType": "INCLUDE"
                  },
                  "ProvisionedThroughput": {
                    "ReadCapacityUnits": 1,
                    "WriteCapacityUnits": 1
                  }
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "burnance-dev-wallet-nft"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "service.burnance.nodejs.lambdas.dev",
            "Export": {
              "Name": "sls-burnance-dev-ServerlessDeploymentBucketName"
            }
          },
          "NftImageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "NftImageLambdaVersionuanTpX3GMd2KjX2cvdQWP6E9ve7vsaPs4rVW2pmpU"
            },
            "Export": {
              "Name": "sls-burnance-dev-NftImageLambdaFunctionQualifiedArn"
            }
          },
          "AddToWaitlistLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AddToWaitlistLambdaVersionDrtdpDI4Mj2UpqvZH0zI9oXpq5k6Sej78EEHEpRw"
            },
            "Export": {
              "Name": "sls-burnance-dev-AddToWaitlistLambdaFunctionQualifiedArn"
            }
          },
          "GetTxFeeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTxFeeLambdaVersionvy2HzI5Ddo8FQa4FTy1U9KSqSvzpnpIXU4ZbxJyJ5aw"
            },
            "Export": {
              "Name": "sls-burnance-dev-GetTxFeeLambdaFunctionQualifiedArn"
            }
          },
          "GetEthPriceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetEthPriceLambdaVersion5BAICm3vm7zh23seWwSgmrPBneMBnaXSdZkETDWMyY"
            },
            "Export": {
              "Name": "sls-burnance-dev-GetEthPriceLambdaFunctionQualifiedArn"
            }
          },
          "ViewNFTtxLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ViewNFTtxLambdaVersionpGtyPJkkG7hz79lLEzuOE9ZMOOJFUs80pKloIFWcVU"
            },
            "Export": {
              "Name": "sls-burnance-dev-ViewNFTtxLambdaFunctionQualifiedArn"
            }
          },
          "QnUnderscorefetchNFTsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "QnUnderscorefetchNFTsLambdaVersioneV2dpUqUP3hd2y9CShIbvS1lgaPe3ugFnL66YdhDY"
            },
            "Export": {
              "Name": "sls-burnance-dev-QnUnderscorefetchNFTsLambdaFunctionQualifiedArn"
            }
          },
          "WalletExecuteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletExecuteLambdaVersion7LwUe9GhQVE8I22qo2PZDRzCBikY54ZTQ94Q7cY"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletExecuteLambdaFunctionQualifiedArn"
            }
          },
          "WalletStopLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletStopLambdaVersionetPI0BiPQBUW1npND1chYPoUKOS6pYIcEw0oXU8I0g"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletStopLambdaFunctionQualifiedArn"
            }
          },
          "WalletStartLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletStartLambdaVersionxzv5hkGY3NiS0UpP8T2PJGKwzG7auTYmeAhFKzu4lc"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletStartLambdaFunctionQualifiedArn"
            }
          },
          "WalletLoadLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletLoadLambdaVersionFFDY8nDO5jaPjZso0Y4vVeVrx95Jgm7acFqAeAvTE"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletLoadLambdaFunctionQualifiedArn"
            }
          },
          "WalletDeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletDeleteLambdaVersion6besqRVQjG6N3KEvjSxnUsJXN9FqPHkhjpwY4IQrMIc"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletDeleteLambdaFunctionQualifiedArn"
            }
          },
          "WalletNotificationLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletNotificationLambdaVersionTQmdEgrsKO5z0STSBhafmKMiZk54xc3GgvdXFYmHN8"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletNotificationLambdaFunctionQualifiedArn"
            }
          },
          "WalletGetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletGetLambdaVersionHJMPseQuNGjBEo7J6cdcA2CkObecaKDuA964briCY"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletGetLambdaFunctionQualifiedArn"
            }
          },
          "WalletAddLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletAddLambdaVersions1HcKNuP4nNTpjm5GS8NrNMOqNbADj5tO4Tdml9IiU"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletAddLambdaFunctionQualifiedArn"
            }
          },
          "CollectionAddLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionAddLambdaVersionUeJRH4lJUCc9vJBUjtr57uu76SZ7rLMOGnAJndHFOco"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionAddLambdaFunctionQualifiedArn"
            }
          },
          "WalletGetNFTsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WalletGetNFTsLambdaVersion2J1epNWtfVYaxf04J0ItqZqXi9fXEhC4UfcyIYZzBXA"
            },
            "Export": {
              "Name": "sls-burnance-dev-WalletGetNFTsLambdaFunctionQualifiedArn"
            }
          },
          "ViewNFTLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ViewNFTLambdaVersionTrB8TV5G0ToZvbWaz0ddJs2ytKiLMssTvsvykgbiE"
            },
            "Export": {
              "Name": "sls-burnance-dev-ViewNFTLambdaFunctionQualifiedArn"
            }
          },
          "CollectionViewLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionViewLambdaVersiongY9qOe9YIxtS6cmu38XlsTRsj2MQgWAWjx9QU4CET6A"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionViewLambdaFunctionQualifiedArn"
            }
          },
          "CollectionGetDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionGetDetailsLambdaVersionCe7EKnpkfssfuyUFXFL0VlljgXSuLTjXATcyIHdQ"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionGetDetailsLambdaFunctionQualifiedArn"
            }
          },
          "CollectionGetVolumeLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionGetVolumeLambdaVersionHBFsyt3CL5ZFQAjEA0zzCX8K5d4daEu87UASsUGEmc"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionGetVolumeLambdaFunctionQualifiedArn"
            }
          },
          "CollectionGetLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionGetLambdaVersion2jLdRrIlvRhQrovsIANR7rI2IuUL92GH4dkE5Pp74q0"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionGetLambdaFunctionQualifiedArn"
            }
          },
          "CollectionGetFloorPriceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionGetFloorPriceLambdaVersiondkEGm7T6HMIcrLkVtWFaSDenMAMvgYqTMebqMOeiUc"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionGetFloorPriceLambdaFunctionQualifiedArn"
            }
          },
          "CollectionDeleteLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CollectionDeleteLambdaVersionpGkOjbzJvDo99zPzpE8ThrjUiHGChrrxBJqjDqNu06I"
            },
            "Export": {
              "Name": "sls-burnance-dev-CollectionDeleteLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-burnance-dev-ServiceEndpoint"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "tableThroughput": 1,
      "prune": {
        "automatic": true,
        "number": 5
      }
    },
    "plugins": [
      "serverless-offline",
      "serverless-prune-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "nftImage": {
        "handler": "actions.getNFTImage",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "nft/image",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-nftImage",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "NftImageLambdaVersionuanTpX3GMd2KjX2cvdQWP6E9ve7vsaPs4rVW2pmpU"
      },
      "viewNFT": {
        "handler": "actions.view",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "view/nft",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-viewNFT",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ViewNFTLambdaVersionTrB8TV5G0ToZvbWaz0ddJs2ytKiLMssTvsvykgbiE"
      },
      "viewNFTtx": {
        "handler": "etherscan/handler.tokenNftTx",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "etherscan/tokenNftTx",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-viewNFTtx",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "ViewNFTtxLambdaVersionpGtyPJkkG7hz79lLEzuOE9ZMOOJFUs80pKloIFWcVU"
      },
      "getEthPrice": {
        "handler": "etherscan/handler.getEthPrice",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "etherscan/ethprice",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-getEthPrice",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetEthPriceLambdaVersion5BAICm3vm7zh23seWwSgmrPBneMBnaXSdZkETDWMyY"
      },
      "getTxFee": {
        "handler": "etherscan/handler.getTxTransactionFee",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "etherscan/tx",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-getTxFee",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetTxFeeLambdaVersionvy2HzI5Ddo8FQa4FTy1U9KSqSvzpnpIXU4ZbxJyJ5aw"
      },
      "addToWaitlist": {
        "handler": "waitlist/handler.add",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "waitlist/add",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-addToWaitlist",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "AddToWaitlistLambdaVersionDrtdpDI4Mj2UpqvZH0zI9oXpq5k6Sej78EEHEpRw"
      },
      "qn_fetchNFTs": {
        "handler": "quicknode/handler.qn_fetchNFTs",
        "memorySize": 128,
        "timeout": 30,
        "events": [
          {
            "http": {
              "path": "quicknode/qn_fetchNFTs",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-qn_fetchNFTs",
        "package": {},
        "memory": 128,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "QnUnderscorefetchNFTsLambdaVersioneV2dpUqUP3hd2y9CShIbvS1lgaPe3ugFnL66YdhDY"
      },
      "walletExecute": {
        "handler": "wallet/wallet.start",
        "events": [
          {
            "http": {
              "path": "wallet/workflow/load/start",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletExecute",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletExecuteLambdaVersion7LwUe9GhQVE8I22qo2PZDRzCBikY54ZTQ94Q7cY"
      },
      "walletStart": {
        "handler": "wallet/steps.start",
        "events": [
          {
            "http": {
              "path": "wallet/step/start",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletStart",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletStartLambdaVersionxzv5hkGY3NiS0UpP8T2PJGKwzG7auTYmeAhFKzu4lc"
      },
      "walletLoad": {
        "handler": "wallet/steps.loadWalletData",
        "events": [
          {
            "http": {
              "path": "wallet/step/details/load",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletLoad",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletLoadLambdaVersionFFDY8nDO5jaPjZso0Y4vVeVrx95Jgm7acFqAeAvTE"
      },
      "walletStop": {
        "handler": "wallet/steps.stop",
        "events": [],
        "name": "burnance-dev-walletStop",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletStopLambdaVersionetPI0BiPQBUW1npND1chYPoUKOS6pYIcEw0oXU8I0g"
      },
      "walletNotification": {
        "handler": "wallet/steps.notification",
        "events": [],
        "name": "burnance-dev-walletNotification",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletNotificationLambdaVersionTQmdEgrsKO5z0STSBhafmKMiZk54xc3GgvdXFYmHN8"
      },
      "walletAdd": {
        "handler": "wallet/wallet.AddWallet",
        "events": [
          {
            "http": {
              "path": "wallet",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletAdd",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletAddLambdaVersions1HcKNuP4nNTpjm5GS8NrNMOqNbADj5tO4Tdml9IiU"
      },
      "walletGet": {
        "handler": "wallet/wallet.GetWallet",
        "events": [
          {
            "http": {
              "path": "wallet/{chain}/{address}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletGet",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletGetLambdaVersionHJMPseQuNGjBEo7J6cdcA2CkObecaKDuA964briCY"
      },
      "walletGetNFTs": {
        "handler": "wallet/wallet.GetWalletNFTs",
        "events": [
          {
            "http": {
              "path": "wallet/nfts/{chain}/{address}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletGetNFTs",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletGetNFTsLambdaVersion2J1epNWtfVYaxf04J0ItqZqXi9fXEhC4UfcyIYZzBXA"
      },
      "walletDelete": {
        "handler": "wallet/wallet.DeleteWallet",
        "events": [
          {
            "http": {
              "path": "wallet/{chain}/{address}",
              "method": "delete",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-walletDelete",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "WalletDeleteLambdaVersion6besqRVQjG6N3KEvjSxnUsJXN9FqPHkhjpwY4IQrMIc"
      },
      "collectionAdd": {
        "handler": "collection/handler.AddCollection",
        "events": [
          {
            "http": {
              "path": "collection",
              "method": "post",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionAdd",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionAddLambdaVersionUeJRH4lJUCc9vJBUjtr57uu76SZ7rLMOGnAJndHFOco"
      },
      "collectionGet": {
        "handler": "collection/handler.GetCollection",
        "events": [
          {
            "http": {
              "path": "collection/{chain}/{address}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionGet",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionGetLambdaVersion2jLdRrIlvRhQrovsIANR7rI2IuUL92GH4dkE5Pp74q0"
      },
      "collectionView": {
        "handler": "collection/handler.ViewCollection",
        "events": [
          {
            "http": {
              "path": "collection/view/{chain}/{address}/{contractAddress}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionView",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionViewLambdaVersiongY9qOe9YIxtS6cmu38XlsTRsj2MQgWAWjx9QU4CET6A"
      },
      "collectionGetDetails": {
        "handler": "collection/handler.GetCollectionDetails",
        "events": [
          {
            "http": {
              "path": "collection/details/{chain}/{address}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionGetDetails",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionGetDetailsLambdaVersionCe7EKnpkfssfuyUFXFL0VlljgXSuLTjXATcyIHdQ"
      },
      "collectionGetFloorPrice": {
        "handler": "collection/handler.GetCollectionFloorPrice",
        "events": [
          {
            "http": {
              "path": "collection/floor/{chain}/{address}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionGetFloorPrice",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionGetFloorPriceLambdaVersiondkEGm7T6HMIcrLkVtWFaSDenMAMvgYqTMebqMOeiUc"
      },
      "collectionGetVolume": {
        "handler": "collection/handler.GetCollectionFloorPrice",
        "events": [
          {
            "http": {
              "path": "collection/volume/{chain}/{address}",
              "method": "get",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionGetVolume",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionGetVolumeLambdaVersionHBFsyt3CL5ZFQAjEA0zzCX8K5d4daEu87UASsUGEmc"
      },
      "collectionDelete": {
        "handler": "collection/handler.DeleteCollection",
        "events": [
          {
            "http": {
              "path": "collection/{chain}/{address}",
              "method": "delete",
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "burnance-dev-collectionDelete",
        "package": {},
        "memory": 128,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "CollectionDeleteLambdaVersionpGkOjbzJvDo99zPzpE8ThrjUiHGChrrxBJqjDqNu06I"
      }
    },
    "resources": {
      "Resources": {
        "NFTImageDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "chain",
                "AttributeType": "S"
              },
              {
                "AttributeName": "address",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "chain",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "address",
                "KeyType": "RANGE"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "burnance-dev-wallet-collection-cache"
          }
        },
        "WalletNFTDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "chain",
                "AttributeType": "S"
              },
              {
                "AttributeName": "contractAddressTokenId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "owner",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "chain",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "contractAddressTokenId",
                "KeyType": "RANGE"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "InstanceIdIndex",
                "KeySchema": [
                  {
                    "AttributeName": "owner",
                    "KeyType": "HASH"
                  },
                  {
                    "AttributeName": "contractAddressTokenId",
                    "KeyType": "RANGE"
                  }
                ],
                "Projection": {
                  "NonKeyAttributes": [
                    "costETH",
                    "costUSD",
                    "valueUSD",
                    "valueETH",
                    "gasUSD",
                    "gasETH",
                    "gasData",
                    "ethTransPriceUSD",
                    "hash",
                    "createdatetime",
                    "timestamp",
                    "status"
                  ],
                  "ProjectionType": "INCLUDE"
                },
                "ProvisionedThroughput": {
                  "ReadCapacityUnits": 1,
                  "WriteCapacityUnits": 1
                }
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "burnance-dev-wallet-nft"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": false,
        "deploymentBucket": "service.burnance.nodejs.lambdas.dev",
        "artifact": "C:\\Users\\Allyn Alford\\Documents\\Burnance.com\\api\\.serverless\\burnance.zip",
        "artifactDirectoryName": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "stepFunctions": {
        "validate": false,
        "stateMachines": {
          "walletDetails": {
            "name": "walletDetailsStateMachine-burnance-dev",
            "id": "WalletDetailsStateMachine",
            "definition": {
              "Comment": "Wallet loading business process",
              "StartAt": "WalletDetailsWorkflow",
              "States": {
                "StartLanguageTagWorkflow": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "languageStart",
                      "Arn"
                    ]
                  },
                  "Next": "StartChoiceState"
                },
                "StartChoiceState": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.resume",
                      "StringEquals": "false",
                      "Next": "Stop"
                    },
                    {
                      "Variable": "$.resume",
                      "StringEquals": "true",
                      "Next": "CheckLanguageStep"
                    }
                  ]
                },
                "CheckLanguageStep": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "languageCheckTag",
                      "Arn"
                    ]
                  },
                  "Next": "TagExistsChoiceState"
                },
                "TagExistsChoiceState": {
                  "Type": "Choice",
                  "Choices": [
                    {
                      "Variable": "$.exists",
                      "StringEquals": "true",
                      "Next": "Stop"
                    },
                    {
                      "Variable": "$.exists",
                      "StringEquals": "false",
                      "Next": "AddLanguageStep"
                    }
                  ]
                },
                "AddLanguageStep": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "languageAddTag",
                      "Arn"
                    ]
                  },
                  "Next": "Completed"
                },
                "Stop": {
                  "Type": "Task",
                  "Resource": {
                    "Fn::GetAtt": [
                      "languageStop",
                      "Arn"
                    ]
                  },
                  "End": true
                },
                "Completed": {
                  "Type": "Succeed"
                }
              }
            },
            "notifications": {
              "ABORTED": [
                {
                  "lambda": "arn:aws:lambda:us-east-1:177038571739:function:remediation-dev-languageNotification"
                }
              ],
              "FAILED": [
                {
                  "lambda": "arn:aws:lambda:us-east-1:177038571739:function:remediation-dev-languageNotification"
                }
              ],
              "RUNNING": [
                {
                  "lambda": "arn:aws:lambda:us-east-1:177038571739:function:remediation-dev-languageNotification"
                }
              ],
              "SUCCEEDED": [
                {
                  "lambda": "arn:aws:lambda:us-east-1:177038571739:function:remediation-dev-languageNotification"
                }
              ],
              "TIMED_OUT": [
                {
                  "lambda": "arn:aws:lambda:us-east-1:177038571739:function:remediation-dev-languageNotification"
                }
              ]
            }
          }
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\Allyn Alford\\Documents\\Burnance.com\\api\\.serverless\\burnance.zip"
  },
  "package": {
    "individually": false,
    "artifactDirectoryName": "serverless/burnance/dev/1658782896393-2022-07-25T21:01:36.393Z",
    "artifact": "burnance.zip"
  }
}