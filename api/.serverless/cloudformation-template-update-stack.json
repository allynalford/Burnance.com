{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "NftImageLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-nftImage"
      }
    },
    "ViewNFTLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-viewNFT"
      }
    },
    "ViewNFTtxLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-viewNFTtx"
      }
    },
    "GetEthPriceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-getEthPrice"
      }
    },
    "GetTxFeeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-getTxFee"
      }
    },
    "AddToWaitlistLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-addToWaitlist"
      }
    },
    "QnUnderscorefetchNFTsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-qn_fetchNFTs"
      }
    },
    "WalletExecuteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletExecute"
      }
    },
    "WalletStartLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletStart"
      }
    },
    "WalletLoadLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletLoad"
      }
    },
    "WalletStopLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletStop"
      }
    },
    "WalletNotificationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletNotification"
      }
    },
    "WalletAddLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletAdd"
      }
    },
    "WalletGetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletGet"
      }
    },
    "WalletGetNFTsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletGetNFTs"
      }
    },
    "WalletDeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-walletDelete"
      }
    },
    "CollectionAddLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionAdd"
      }
    },
    "CollectionGetLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionGet"
      }
    },
    "CollectionViewLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionView"
      }
    },
    "CollectionGetDetailsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionGetDetails"
      }
    },
    "CollectionGetFloorPriceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionGetFloorPrice"
      }
    },
    "CollectionGetVolumeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionGetVolume"
      }
    },
    "CollectionDeleteLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/burnance-prod-collectionDelete"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "burnance",
                  "prod",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/burnance-prod*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/burnance-prod*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:DeleteObject",
                    "s3:*"
                  ],
                  "Resource": [
                    "arn:aws:s3:::nft.burnance.io/*",
                    "arn:aws:s3:::image.nft.burnance.io/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:DescribeTable",
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:DeleteItem"
                  ],
                  "Resource": [
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-nfts-metadata",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-contract-abi",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-waitlist",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-wallet",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-wallet-nft",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-wallet-nft/index/*",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-wallet-nft-cache",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-wallet-nft-tx",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-nfts-image",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-nft-collection",
                    "arn:aws:dynamodb:us-east-1:*:table/burnance-prod-wallet-collection-cache"
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "burnance",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "NftImageLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "actions.getNFTImage",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-nftImage",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "NftImageLogGroup"
      ]
    },
    "ViewNFTLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "actions.view",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-viewNFT",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ViewNFTLogGroup"
      ]
    },
    "ViewNFTtxLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "etherscan/handler.tokenNftTx",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-viewNFTtx",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ViewNFTtxLogGroup"
      ]
    },
    "GetEthPriceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "etherscan/handler.getEthPrice",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-getEthPrice",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetEthPriceLogGroup"
      ]
    },
    "GetTxFeeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "etherscan/handler.getTxTransactionFee",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-getTxFee",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTxFeeLogGroup"
      ]
    },
    "AddToWaitlistLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "waitlist/handler.add",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-addToWaitlist",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AddToWaitlistLogGroup"
      ]
    },
    "QnUnderscorefetchNFTsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "quicknode/handler.qn_fetchNFTs",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-qn_fetchNFTs",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "QnUnderscorefetchNFTsLogGroup"
      ]
    },
    "WalletExecuteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/wallet.start",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletExecute",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletExecuteLogGroup"
      ]
    },
    "WalletStartLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/steps.start",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletStart",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletStartLogGroup"
      ]
    },
    "WalletLoadLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/steps.loadWalletData",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletLoad",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletLoadLogGroup"
      ]
    },
    "WalletStopLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/steps.stop",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletStop",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletStopLogGroup"
      ]
    },
    "WalletNotificationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/steps.notification",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletNotification",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletNotificationLogGroup"
      ]
    },
    "WalletAddLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/wallet.AddWallet",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletAdd",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletAddLogGroup"
      ]
    },
    "WalletGetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/wallet.GetWallet",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletGet",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletGetLogGroup"
      ]
    },
    "WalletGetNFTsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/wallet.GetWalletNFTs",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletGetNFTs",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletGetNFTsLogGroup"
      ]
    },
    "WalletDeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "wallet/wallet.DeleteWallet",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-walletDelete",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "WalletDeleteLogGroup"
      ]
    },
    "CollectionAddLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.AddCollection",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionAdd",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionAddLogGroup"
      ]
    },
    "CollectionGetLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.GetCollection",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionGet",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionGetLogGroup"
      ]
    },
    "CollectionViewLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.ViewCollection",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionView",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionViewLogGroup"
      ]
    },
    "CollectionGetDetailsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.GetCollectionDetails",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionGetDetails",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionGetDetailsLogGroup"
      ]
    },
    "CollectionGetFloorPriceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.GetCollectionFloorPrice",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionGetFloorPrice",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionGetFloorPriceLogGroup"
      ]
    },
    "CollectionGetVolumeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.GetCollectionFloorPrice",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionGetVolume",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionGetVolumeLogGroup"
      ]
    },
    "CollectionDeleteLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "service.burnance.nodejs.lambdas.prod",
          "S3Key": "serverless/burnance/prod/1658792209439-2022-07-25T23:36:49.439Z/burnance.zip"
        },
        "Handler": "collection/handler.DeleteCollection",
        "Runtime": "nodejs12.x",
        "FunctionName": "burnance-prod-collectionDelete",
        "MemorySize": 128,
        "Timeout": 30,
        "Environment": {
          "Variables": {
            "STAGE": "prod",
            "REGION": "us-east-1",
            "ACCOUNTID": "297677912558",
            "USER_AGENT": "nft.burnance.io",
            "CDN_BUCKET": "nft.burnance.io",
            "NFT_IMAGE_CDN_BUCKET": "image.nft.burnance.io",
            "QUICK_NODE_HTTP": "https://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "QUICK_NODE_WSS": "wss://aged-wild-sun.discover.quiknode.pro/22d04687857eddacbc7d24f70b51106bcf679686/",
            "ETHERSCAN_API_URL": "https://api.etherscan.io/api",
            "ALCHEMY_API_KEY": "SExwOepdX3Gy9l-FZQVVITPkIf9sfzNJ",
            "API_KEY_TOKEN": "WWY6WGBKZCG5U8JEY2RNTXT1YWMMER6SPN",
            "PRO_API_KEY": "TFSZVPV8PUQ2HZWWJAI6TPSASX72HRYNWS",
            "ETHERSCAN_ABI_PARAMS": "module=contract&action=getabi",
            "OPEN": "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",
            "SLACK_API_WAITLIST_WEBHOOK": "https://hooks.slack.com/services/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",
            "DRIP": "d19af8d64382261d9cbd9762fdd07356",
            "DRIP_ID": "4947055",
            "S3_DRIP_CDN_BUCKET": "events.nft.burnance.io",
            "DYNAMODB_TABLE_CONTRACT_ABI": "burnance-prod-contract-abi",
            "DYNAMODB_TABLE_NFT_METADATA": "burnance-prod-nfts-metadata",
            "DYNAMODB_TABLE_NFT_IMAGE": "burnance-prod-nfts-image",
            "DYNAMODB_TABLE_WAITLIST": "burnance-prod-waitlist",
            "DYNAMODB_TABLE_WALLET": "burnance-prod-wallet",
            "DYNAMODB_TABLE_WALLET_NFT": "burnance-prod-wallet-nft",
            "DYNAMODB_TABLE_WALLET_NFT_CACHE": "burnance-prod-wallet-nft-cache",
            "DYNAMODB_TABLE_WALLET_COLLECTION_CACHE": "burnance-prod-wallet-collection-cache",
            "DYNAMODB_TABLE_WALLET_NFT_TX": "burnance-prod-wallet-nft-tx",
            "DYNAMODB_TABLE_NFT_COLLECTION": "burnance-prod-nft-collection",
            "NODE": "wss://mainnet.infura.io/ws/v3/4168ad1b2f574ec1a6944fcb1d4d906c",
            "KEY": "adfb72ce9754e3cbc1e79e44a8e20804cebd3c4a347605c6a3462a8de05b8783",
            "STATE_MACHINE_WALLET_ARN": "arn:aws:states:us-east-1:297677912558:stateMachine:walletDetailsStateMachineArn"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CollectionDeleteLogGroup"
      ]
    },
    "ViewNFTtxLambdaVersionnZCCl3NdTfuXe2QKTCP2n2pwePnLl7lNlefBPxtsHY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ViewNFTtxLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "GetEthPriceLambdaVersion4Nq5OInfYFv4hvsWAeeDFWxCfJyF9pCVo2HM6bzFH5k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetEthPriceLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "AddToWaitlistLambdaVersionDjg13jYmhTYiW93xepf4s0wAGxZMg9qjGp8mfzGrU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AddToWaitlistLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "NftImageLambdaVersionVdYHJEDd8ZBNRsj2k43n4bP0iCtBlHbc2w6Mop1NqQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "NftImageLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "GetTxFeeLambdaVersionvIeSSXArDYMVMoec4G20Cxo0TRTBmfUcLCx97yrKUQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTxFeeLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletExecuteLambdaVersionVqOYpxyyAdfDICNk4pNnDQm9myUzY0f4zmtntSS9PKc": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletExecuteLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletStartLambdaVersionTMDxe8Roo9AGado3BbFZLCwnDmTfs6980EKiRlg2c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletStartLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "QnUnderscorefetchNFTsLambdaVersionwSEvp2bkJQYFIJGnjqTdMyoVeXMl8AVKoGk47tqmbo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "QnUnderscorefetchNFTsLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletLoadLambdaVersionNUu4J1MV5HcUABWGz3bNStd9PJWmC0sTcZg10taIq4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletLoadLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletAddLambdaVersionfbIcJlaIOBp0Ff4lwXqXSVsTsi13URKfyNu7oi5jHWg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletAddLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "ViewNFTLambdaVersiondl29ZH3tqjAsa8Zt8DYUnKDxQvQhjKhKlWEPDBVwn4": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ViewNFTLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletNotificationLambdaVersionh10rLC0xyRXxykl6nBIQB3bGVC7D36g7YJZotjVYKk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletNotificationLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionViewLambdaVersionHXNfrXcnn61FBc20InsTJb1pPOEBEblUNbUrFsSWB7c": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionViewLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletStopLambdaVersionipMftcIlBsYL66CRwqvSEnrgk0G7ioE3pLcOrB0Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletStopLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletGetNFTsLambdaVersionBDsabSY7rkrzyncAuzqZLgCEYoqOWKjaD9GJRiyvEU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletGetNFTsLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletGetLambdaVersionwbBb0VfiQPni1tKbeFkgLGkMjKopHUBq01Cc4MGaI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletGetLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionGetLambdaVersioniDpEjxbL8dP5W4kSrkp0HyGSgbJhnn9XZXZXYBqmhk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionGetLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "WalletDeleteLambdaVersionBeEKxNY2DFHRos2ppkEFvcSctlqFLxYQshqRksvM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "WalletDeleteLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionGetDetailsLambdaVersionmqX6WHx9FmKDUUBWnCaF1LeSi3uFi90prC4iq84": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionGetDetailsLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionAddLambdaVersionuQN1TtXzsAiV6oCIZVd6fWVzabqjL8SYoyQbLlcbXo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionAddLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionGetFloorPriceLambdaVersionPD9HimTMzKpI4XpagQ9wI9NlB0z6xjoqrofHDXJeuDg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionGetFloorPriceLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionDeleteLambdaVersionHMmTAfwImblVrf02kDUHcqXNoBQgD2md8q0KLKgPA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionDeleteLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "CollectionGetVolumeLambdaVersionedpdhW7e56nUYnPTAc1AXktmCXamL6CGmgN8pkfh0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CollectionGetVolumeLambdaFunction"
        },
        "CodeSha256": "ai1eCLwt/piNkFp+mu+a3EA9lhEOx/Qtcuj8VO/yhOo="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "prod-burnance",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceNft": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "nft",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceNftImage": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceNft"
        },
        "PathPart": "image",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceView": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "view",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceViewNft": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceView"
        },
        "PathPart": "nft",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEtherscan": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "etherscan",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEtherscanTokennfttx": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEtherscan"
        },
        "PathPart": "tokenNftTx",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEtherscanEthprice": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEtherscan"
        },
        "PathPart": "ethprice",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceEtherscanTx": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceEtherscan"
        },
        "PathPart": "tx",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWaitlist": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "waitlist",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWaitlistAdd": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWaitlist"
        },
        "PathPart": "add",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuicknode": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "quicknode",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceQuicknodeQnfetchnfts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceQuicknode"
        },
        "PathPart": "qn_fetchNFTs",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWallet": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "wallet",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletWorkflow": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWallet"
        },
        "PathPart": "workflow",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletWorkflowLoad": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletWorkflow"
        },
        "PathPart": "load",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletWorkflowLoadStart": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletWorkflowLoad"
        },
        "PathPart": "start",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletStep": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWallet"
        },
        "PathPart": "step",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletStepStart": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletStep"
        },
        "PathPart": "start",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletStepDetails": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletStep"
        },
        "PathPart": "details",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletStepDetailsLoad": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletStepDetails"
        },
        "PathPart": "load",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWallet"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletNfts": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWallet"
        },
        "PathPart": "nfts",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletNftsChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletNfts"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceWalletNftsChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceWalletNftsChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollection": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "collection",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionView": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "PathPart": "view",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionViewChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionView"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionViewChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionViewChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionViewChainVarAddressVarContractaddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionViewChainVarAddressVar"
        },
        "PathPart": "{contractAddress}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionDetails": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "PathPart": "details",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionDetailsChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionDetails"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionDetailsChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionDetailsChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionFloor": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "PathPart": "floor",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionFloorChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionFloor"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionFloorChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionFloorChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionVolume": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "PathPart": "volume",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionVolumeChainVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionVolume"
        },
        "PathPart": "{chain}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceCollectionVolumeChainVarAddressVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceCollectionVolumeChainVar"
        },
        "PathPart": "{address}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodNftImageOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceNftImage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodViewNftOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceViewNft"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEtherscanTokennfttxOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEtherscanTokennfttx"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEtherscanEthpriceOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEtherscanEthprice"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodEtherscanTxOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceEtherscanTx"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWaitlistAddOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWaitlistAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodQuicknodeQnfetchnftsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuicknodeQnfetchnfts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWalletWorkflowLoadStartOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletWorkflowLoadStart"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWalletOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWallet"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWalletChainVarAddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodWalletNftsChainVarAddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletNftsChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionChainVarAddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionViewChainVarAddressVarContractaddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionDetailsChainVarAddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionDetailsChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionFloorChainVarAddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionFloorChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodCollectionVolumeChainVarAddressVarOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionVolumeChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodNftImagePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceNftImage"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "NftImageLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "NftImageLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodViewNftPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceViewNft"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ViewNFTLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ViewNFTLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEtherscanTokennfttxPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEtherscanTokennfttx"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "ViewNFTtxLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "ViewNFTtxLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEtherscanEthpriceGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEtherscanEthprice"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetEthPriceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetEthPriceLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodEtherscanTxGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceEtherscanTx"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTxFeeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTxFeeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWaitlistAddPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWaitlistAdd"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AddToWaitlistLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AddToWaitlistLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodQuicknodeQnfetchnftsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceQuicknodeQnfetchnfts"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "QnUnderscorefetchNFTsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "QnUnderscorefetchNFTsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletWorkflowLoadStartPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletWorkflowLoadStart"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletExecuteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletExecuteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletStepStartPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletStepStart"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletStartLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletStartLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletStepDetailsLoadPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletStepDetailsLoad"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletLoadLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletLoadLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWallet"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletAddLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletAddLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletChainVarAddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletGetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletGetLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletNftsChainVarAddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletNftsChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletGetNFTsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletGetNFTsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodWalletChainVarAddressVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceWalletChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "WalletDeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "WalletDeleteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollection"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionAddLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionAddLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionChainVarAddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionGetLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionGetLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionViewChainVarAddressVarContractaddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionViewLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionViewLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionDetailsChainVarAddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionDetailsChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionGetDetailsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionGetDetailsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionFloorChainVarAddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionFloorChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionGetFloorPriceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionGetFloorPriceLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionVolumeChainVarAddressVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionVolumeChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionGetVolumeLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionGetVolumeLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodCollectionChainVarAddressVarDelete": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "DELETE",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceCollectionChainVarAddressVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CollectionDeleteLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CollectionDeleteLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1658792167841": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodNftImageOptions",
        "ApiGatewayMethodViewNftOptions",
        "ApiGatewayMethodEtherscanTokennfttxOptions",
        "ApiGatewayMethodEtherscanEthpriceOptions",
        "ApiGatewayMethodEtherscanTxOptions",
        "ApiGatewayMethodWaitlistAddOptions",
        "ApiGatewayMethodQuicknodeQnfetchnftsOptions",
        "ApiGatewayMethodWalletWorkflowLoadStartOptions",
        "ApiGatewayMethodWalletOptions",
        "ApiGatewayMethodWalletChainVarAddressVarOptions",
        "ApiGatewayMethodWalletNftsChainVarAddressVarOptions",
        "ApiGatewayMethodCollectionOptions",
        "ApiGatewayMethodCollectionChainVarAddressVarOptions",
        "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarOptions",
        "ApiGatewayMethodCollectionDetailsChainVarAddressVarOptions",
        "ApiGatewayMethodCollectionFloorChainVarAddressVarOptions",
        "ApiGatewayMethodCollectionVolumeChainVarAddressVarOptions",
        "ApiGatewayMethodNftImagePost",
        "ApiGatewayMethodViewNftPost",
        "ApiGatewayMethodEtherscanTokennfttxPost",
        "ApiGatewayMethodEtherscanEthpriceGet",
        "ApiGatewayMethodEtherscanTxGet",
        "ApiGatewayMethodWaitlistAddPost",
        "ApiGatewayMethodQuicknodeQnfetchnftsPost",
        "ApiGatewayMethodWalletWorkflowLoadStartPost",
        "ApiGatewayMethodWalletStepStartPost",
        "ApiGatewayMethodWalletStepDetailsLoadPost",
        "ApiGatewayMethodWalletPost",
        "ApiGatewayMethodWalletChainVarAddressVarGet",
        "ApiGatewayMethodWalletNftsChainVarAddressVarGet",
        "ApiGatewayMethodWalletChainVarAddressVarDelete",
        "ApiGatewayMethodCollectionPost",
        "ApiGatewayMethodCollectionChainVarAddressVarGet",
        "ApiGatewayMethodCollectionViewChainVarAddressVarContractaddressVarGet",
        "ApiGatewayMethodCollectionDetailsChainVarAddressVarGet",
        "ApiGatewayMethodCollectionFloorChainVarAddressVarGet",
        "ApiGatewayMethodCollectionVolumeChainVarAddressVarGet",
        "ApiGatewayMethodCollectionChainVarAddressVarDelete"
      ]
    },
    "NftImageLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "NftImageLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ViewNFTLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ViewNFTLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "ViewNFTtxLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "ViewNFTtxLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetEthPriceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetEthPriceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetTxFeeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTxFeeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AddToWaitlistLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AddToWaitlistLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "QnUnderscorefetchNFTsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "QnUnderscorefetchNFTsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletExecuteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletExecuteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletStartLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletStartLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletLoadLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletLoadLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletAddLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletAddLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletGetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletGetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletGetNFTsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletGetNFTsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "WalletDeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "WalletDeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionAddLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionAddLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionGetLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionGetLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionViewLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionViewLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionGetDetailsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionGetDetailsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionGetFloorPriceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionGetFloorPriceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionGetVolumeLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionGetVolumeLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CollectionDeleteLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CollectionDeleteLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "NFTImageDynamoDBTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "chainContractAddress",
            "AttributeType": "S"
          },
          {
            "AttributeName": "tokenId",
            "AttributeType": "N"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "chainContractAddress",
            "KeyType": "HASH"
          },
          {
            "AttributeName": "tokenId",
            "KeyType": "RANGE"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "burnance-prod-nfts-image"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "service.burnance.nodejs.lambdas.prod",
      "Export": {
        "Name": "sls-burnance-prod-ServerlessDeploymentBucketName"
      }
    },
    "ViewNFTtxLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ViewNFTtxLambdaVersionnZCCl3NdTfuXe2QKTCP2n2pwePnLl7lNlefBPxtsHY"
      },
      "Export": {
        "Name": "sls-burnance-prod-ViewNFTtxLambdaFunctionQualifiedArn"
      }
    },
    "GetEthPriceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetEthPriceLambdaVersion4Nq5OInfYFv4hvsWAeeDFWxCfJyF9pCVo2HM6bzFH5k"
      },
      "Export": {
        "Name": "sls-burnance-prod-GetEthPriceLambdaFunctionQualifiedArn"
      }
    },
    "AddToWaitlistLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AddToWaitlistLambdaVersionDjg13jYmhTYiW93xepf4s0wAGxZMg9qjGp8mfzGrU"
      },
      "Export": {
        "Name": "sls-burnance-prod-AddToWaitlistLambdaFunctionQualifiedArn"
      }
    },
    "NftImageLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "NftImageLambdaVersionVdYHJEDd8ZBNRsj2k43n4bP0iCtBlHbc2w6Mop1NqQ"
      },
      "Export": {
        "Name": "sls-burnance-prod-NftImageLambdaFunctionQualifiedArn"
      }
    },
    "GetTxFeeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTxFeeLambdaVersionvIeSSXArDYMVMoec4G20Cxo0TRTBmfUcLCx97yrKUQ"
      },
      "Export": {
        "Name": "sls-burnance-prod-GetTxFeeLambdaFunctionQualifiedArn"
      }
    },
    "WalletExecuteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletExecuteLambdaVersionVqOYpxyyAdfDICNk4pNnDQm9myUzY0f4zmtntSS9PKc"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletExecuteLambdaFunctionQualifiedArn"
      }
    },
    "WalletStartLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletStartLambdaVersionTMDxe8Roo9AGado3BbFZLCwnDmTfs6980EKiRlg2c"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletStartLambdaFunctionQualifiedArn"
      }
    },
    "QnUnderscorefetchNFTsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "QnUnderscorefetchNFTsLambdaVersionwSEvp2bkJQYFIJGnjqTdMyoVeXMl8AVKoGk47tqmbo"
      },
      "Export": {
        "Name": "sls-burnance-prod-QnUnderscorefetchNFTsLambdaFunctionQualifiedArn"
      }
    },
    "WalletLoadLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletLoadLambdaVersionNUu4J1MV5HcUABWGz3bNStd9PJWmC0sTcZg10taIq4"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletLoadLambdaFunctionQualifiedArn"
      }
    },
    "WalletAddLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletAddLambdaVersionfbIcJlaIOBp0Ff4lwXqXSVsTsi13URKfyNu7oi5jHWg"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletAddLambdaFunctionQualifiedArn"
      }
    },
    "ViewNFTLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ViewNFTLambdaVersiondl29ZH3tqjAsa8Zt8DYUnKDxQvQhjKhKlWEPDBVwn4"
      },
      "Export": {
        "Name": "sls-burnance-prod-ViewNFTLambdaFunctionQualifiedArn"
      }
    },
    "WalletNotificationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletNotificationLambdaVersionh10rLC0xyRXxykl6nBIQB3bGVC7D36g7YJZotjVYKk"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletNotificationLambdaFunctionQualifiedArn"
      }
    },
    "CollectionViewLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionViewLambdaVersionHXNfrXcnn61FBc20InsTJb1pPOEBEblUNbUrFsSWB7c"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionViewLambdaFunctionQualifiedArn"
      }
    },
    "WalletStopLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletStopLambdaVersionipMftcIlBsYL66CRwqvSEnrgk0G7ioE3pLcOrB0Q"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletStopLambdaFunctionQualifiedArn"
      }
    },
    "WalletGetNFTsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletGetNFTsLambdaVersionBDsabSY7rkrzyncAuzqZLgCEYoqOWKjaD9GJRiyvEU"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletGetNFTsLambdaFunctionQualifiedArn"
      }
    },
    "WalletGetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletGetLambdaVersionwbBb0VfiQPni1tKbeFkgLGkMjKopHUBq01Cc4MGaI"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletGetLambdaFunctionQualifiedArn"
      }
    },
    "CollectionGetLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionGetLambdaVersioniDpEjxbL8dP5W4kSrkp0HyGSgbJhnn9XZXZXYBqmhk"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionGetLambdaFunctionQualifiedArn"
      }
    },
    "WalletDeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "WalletDeleteLambdaVersionBeEKxNY2DFHRos2ppkEFvcSctlqFLxYQshqRksvM"
      },
      "Export": {
        "Name": "sls-burnance-prod-WalletDeleteLambdaFunctionQualifiedArn"
      }
    },
    "CollectionGetDetailsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionGetDetailsLambdaVersionmqX6WHx9FmKDUUBWnCaF1LeSi3uFi90prC4iq84"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionGetDetailsLambdaFunctionQualifiedArn"
      }
    },
    "CollectionAddLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionAddLambdaVersionuQN1TtXzsAiV6oCIZVd6fWVzabqjL8SYoyQbLlcbXo"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionAddLambdaFunctionQualifiedArn"
      }
    },
    "CollectionGetFloorPriceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionGetFloorPriceLambdaVersionPD9HimTMzKpI4XpagQ9wI9NlB0z6xjoqrofHDXJeuDg"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionGetFloorPriceLambdaFunctionQualifiedArn"
      }
    },
    "CollectionDeleteLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionDeleteLambdaVersionHMmTAfwImblVrf02kDUHcqXNoBQgD2md8q0KLKgPA"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionDeleteLambdaFunctionQualifiedArn"
      }
    },
    "CollectionGetVolumeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CollectionGetVolumeLambdaVersionedpdhW7e56nUYnPTAc1AXktmCXamL6CGmgN8pkfh0"
      },
      "Export": {
        "Name": "sls-burnance-prod-CollectionGetVolumeLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      },
      "Export": {
        "Name": "sls-burnance-prod-ServiceEndpoint"
      }
    }
  }
}